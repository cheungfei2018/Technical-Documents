场景之间跳转：
	cc.director.loadScene(sceneName,callback);
	参数：
		sceneName:场景名称
		callback:场景加载后的回调函数
		

获取逻辑树的场景节点：
	var logicScene = cc.director.getScene();
	
释放不使用的资源
cc.loader.release
	

类和对象
cc.game
cc.view
cc.director
cc.audioEngine
cc.eventManager
cc.scheduler
cc.textureCache
cc.sys
cc.visibleRect


JavaScript脚本中属性声明时常用的参数

    default: 设置属性的默认值，这个默认值仅在组件第一次添加到节点上时才会用到
    type: 限定属性的数据类型，详见 CCClass 进阶参考：type 参数
    visible: 设为 false 则不在 属性检查器 面板中显示该属性
    serializable: 设为 false 则不序列化（保存）该属性
    displayName: 在 属性检查器 面板中显示成指定名字
    tooltip: 在 属性检查器 面板中添加属性的 Tooltip

	
cc.Component 是所有组件的基类，任何组件都包括如下的常见接口（假设我们在该组件的脚本中，以 this 指代本组件）：

    this.node：该组件所属的节点实例
    this.enabled：是否每帧执行该组件的 update 方法，同时也用来控制渲染组件是否显示
    update(dt)：作为组件的成员方法，在组件的 enabled 属性为 true 时，其中的代码会每帧执行
    onLoad()：组件所在节点进行初始化时（节点添加到节点树时）执行
    start()：会在该组件第一次 update 之前执行，通常用于需要在所有组件的 onLoad 初始化完毕后执行的逻辑

	
目前提供给用户的生命周期回调函数主要有：

    onLoad：组件首次激活时触发
    start：组件第一次激活前
    update：游戏开发的一个关键点是在每一帧渲染前更新物体的行为，状态和方位，会在所有动画更新前执行
    lateUpdate：动画更新之后才进行一些额外操作
    onDestroy：当组件的 enabled 属性从 false 变为 true 时，或者所在节点的 active 属性从 false 变为 true 时
    onEnable：当组件的 enabled 属性从 true 变为 false 时，或者所在节点的 active 属性从 true 变为 false 时
    onDisable




事件：
node.emit(type, detail)：通知所有监听 type 事件的监听器，可以发送一个附加参数。
node.dispatchEvent(event)：发送一个事件给它的监听器，支持冒泡。
node.on(type, callback, target)：持续监听 node 的 type 事件。
node.once(type, callback, target)：监听一次 node 的 type 事件。
node.off(type, callback, target)：取消监听所有 type 事件或取消 type 的某个监听器（用 callback 和 target 指定）。


事件：
枚举对象定义 					对应的事件名
cc.Node.EventType.TOUCH_START 	'touchstart'
cc.Node.EventType.TOUCH_MOVE 	'touchmove'
cc.Node.EventType.TOUCH_END 	'touchend'
cc.Node.EventType.TOUCH_CANCEL 	'touchcancel'
cc.Node.EventType.MOUSE_DOWN 	'mousedown'
cc.Node.EventType.MOUSE_ENTER 	'mouseenter'
cc.Node.EventType.MOUSE_MOVE 	'mousemove'
cc.Node.EventType.MOUSE_LEAVE 	'mouseleave'
cc.Node.EventType.MOUSE_UP 		'mouseup'
cc.Node.EventType.MOUSE_WHEEL 	'mousewheel'