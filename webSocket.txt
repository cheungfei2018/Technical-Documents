websocket是基于TCP的一种新的网络协议，实现了浏览器与服务器双工(full-duplex)通信，允许服务器端主动发送信息给客户端

websocket是HTML5一种新的协议

websocket是一个持久化的协议：
	在http中生命周期通过Request来界定，也就是一个Request和一个response，之后http请求就结束了
	在HTTP1.1中进行了改进，可以使用一个keep-alive,也就是说，在一个http连接中，可以发送多个Request，接收多个response，但请记住：Request=Response，在HTTP中永远是这样，一个Request只能有一个response，而且response是被动的，不能主动发起
	
	websocket是基于http协议或者说借用了http协议来完成一次握手
	
	客户端：
		GET /chat HTTP/1.1
		Host: server.example.com
		Upgrade: websocket
		Connection: Upgrade		//前面这两句是websocket核心，告诉服务器，发起的是websocket协议，快帮我找到对应的助理处理
		Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==	//上句，浏览器随机生成的key，验证服务器端助理
		Sec-WebSocket-Protocol: chat, superchat	//用户定义的字符串，用来区分同URL下，不同服务所需要的协议
		Sec-WebSocket-Version: 13	//告诉服务器websocket协议版本
		Origin: http://example.com
	
	服务器返回下列东西，表示已经接受请求，成功建立websocket：
		HTTP/1.1 101 Switching Protocols
		Upgrade: websocket
		Connection: Upgrade	//前两句，告诉客户端即将升级为websocket协议
		Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=	//经过服务器确认，并且加密过的key
		Sec-WebSocket-Protocol: chat	//最终使用协议
		以上是http最后负责的区域，至此http完成了它所有的工作，接下来就是完全按照websocket协议进行了
		
		
websocket：
解决了http的几个难题：
	1.被动性；场景：
		客户端：啦啦啦，我要建立Websocket协议，需要的服务：chat，Websocket协议版本：17（HTTP Request）
		服务端：ok，确认，已升级为Websocket协议（HTTP Protocols Switched）
		客户端：麻烦你有信息的时候推送给我噢。。
		服务端：ok，有的时候会告诉你的。
		服务端：balabalabalabala
		服务端：哈哈哈哈哈啊哈哈哈哈
		服务端：笑死我了哈哈哈哈哈哈哈
	只需要一次http请求，就可以源源不断的信息传送(程序设计中这种设计叫做回调)；这样的协议解决了ajax轮询和 long poll同步有延迟而且还非常消耗资源的情况，原因如下：
		程序是要经过两层代理的；即http协议在Nginx等服务器的解析下，在传送给相应的Handler(php等)处理，简单的说就是有一个快速的接线员(服务器)，他负责把问题转交给相应的客服(Handler);本身接线员基本上速度是足够的，丹每次卡在Handler上，有些Handler处理速度太慢，导致Handler不够，websocket就解决了这种难题，建立连接后，可以跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员同意转交给客户
		
websocket只需要一次http握手，然后整个通讯过程是建立在一次连接状态中，避免了HTTP的非状态性，服务器会一直知道客户端的信息，知道关闭请求

在不支持websocket的客户端上不能使用websocket
	
ajax轮询
	ajax轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。		
	场景再现：
	客户端：啦啦啦，有没有新信息(Request)
	服务端：没有（Response）
	客户端：啦啦啦，有没有新信息(Request)
	服务端：没有。。（Response）
	客户端：啦啦啦，有没有新信息(Request)
	服务端：你好烦啊，没有啊。。（Response）
	客户端：啦啦啦，有没有新消息（Request）
	服务端：好啦好啦，有啦给你。（Response）
	客户端：啦啦啦，有没有新消息（Request）
	服务端：。。。。。没。。。。没。。。没有（Response）―-loop	
	

long poll
	long poll其实原理跟ajax轮询差不多，都是采用轮询的方式，
不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。		
	场景再现：
	客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request）
	服务端：额。。 等待到有消息的时候。。来 给你（Response）
	客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request） -loop

	
ajax轮询和long poll：
	都是不断地建立http连接，然后等待服务器处理，http的被动性，也就是说服务器不能主动联系客户端，只能由客户端发起；
	缺陷：非常消耗资源，ajax轮序需要服务器有很快的处理速度和资源；long poll需要很高的并发，也就是接待客户的能力(场地大小)；所以可能出现503错误


websocket与http：
	