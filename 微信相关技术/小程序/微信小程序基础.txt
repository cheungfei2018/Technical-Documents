微信小程序项目代码构成
1 .js后缀的JS脚本逻辑文件
2 .json后缀的JSON配置文件
3 .wxml后缀的WXML模板文件
4 .wxss后缀的WXSS样式文件


快速创建的QuickStart项目：

1.根目录下有一个app.json和project.config.json;在pages/logs目录下还有一个logs.json
	app.json：
		是对当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部tab等，
			pages字段：用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录
			window字段：小程序所有页面的顶部背景色，文字颜色定义都在这里，可以在不同的页面json文件中覆盖定义
		
		
	project.config.json：
	工具配置，开发工具的配置，一般可以不管
	
	
	pages/logs/logs.json：
	页面配置，每个页面度可以配置当前页面的东西，因为不同页面可能表现不同，相同属性会覆盖app.json
	
	
2.WXML:充当的就是类似 HTML 的角色,但是与HTML有很多地方不一样：
	1. 标签名称不同，WXML将HTML代码块封装成组件的形式进行调用
	2.WXML多了如wx:if这样的属性以及{{}}这样的表达式，使用MVVM的开发模式，将渲染和逻辑分离开来，不让js直接操作DOM。js只需要管理状态即可；这种方式叫做数据绑定
	
	
3.WXSS样式：具有css大部分特性，小程序在WXSS也做了一些扩充和修改
	1.新增了尺寸单位，WXSS在底层支持新的尺寸单位rpx；单位换算交给底层
	2.提供全局的样式和局部的样式，app.WXSS写全局样式；各个页面的.WXSS写局部样式，仅对当前页面生效
	3.WXSS仅支持部分css选择器：id\class\元素\组\::after\::before
	

4.JS交互逻辑：与用户做交互，如响应用户点击、获取用户位置、输入等


5.在app.json中pages字段的第一个页面就是小程序的首页(入口页面)


6.整个小程序只有一个App实例，是全部页面共享的，小程序启动后，app.js中的onLaunch回调会被执行
	(注册程序 App({})  )


7. .js页面的Page({...})是页面构造器，这个构造器就生成了一个页面
	(注册页面 Page({})  )
	小程序框架会把data数据和index.wxml一起渲染出最终的结构
	

8.组件：小程序提供了丰富的基础组件，无需编写div、p等，只需要在WXML协商对应的组件标签名就可以把该组件显示在界面上
	使用组件时可以通过书信传递值给组件，让组件可以以不同的状态去展现
	组件的内部行为也会通过事件的形式让开发者可以感知
	也可以通过style内联样式或者WXSS来控制组件的外层样式，以便适应界面宽高
	
	
API：开发者通过API可以很方便的调用微信提供的能力，如获取用户信息，微信支付等
	tip：多数API的回调都是异步，所以使用时需要处理好代码逻辑的异步问题
	
	
	
	
	
	
	
	