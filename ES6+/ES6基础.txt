1.变量的声明：const和let	(tip:与ES5不同，const\let定义的变量不存在变量提升)
	const：常量
	let：变量
	
	const\let：块级作用域，{}内的代码块
	
	暂时性死区：在代码块内，使用let命令声明变量之前，该变量都是不可用的
	
	不允许重复声明：let不允许在相同作用域内，重复声明同一个变量
	
	块级作用域({}内的作用域)和函数声明：
		ES5规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明
		ES6引入了块级作用域，明确允许在块级作用域之中声明函数。ES6规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。
		
	const声明一个只读的常量。一旦声明，常量的值就不能改变。声明之后必须立即初始化，不能留到后面再赋值
	
	其他特性和let一样
	

ES6变量声明的六种方法：
	var
	function
	let
	const
	import
	class
	
	
顶级对象的属性：
	在浏览器环境指的是window对象
	在 Node 指的是global对象
	
	在ES5中，顶级对象的属性和全局变量是等价的
	ES6为了改变这一点，一方面规定，为了保持兼容性，var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。

	
2.模板字符串：使用反引号``括起来的字符串
	1.基本字符串的格式化\链接字符串与变量;将表达式嵌入字符串进行拼接，用${}来界定
	2.对于特殊字符，ES6中使用反引号``直接搞定；ES5中需要反斜杠(\)进行转移
	3.E6中提供的常用字符串方法：
		3.1.String.includes(subStr)：判断是否包含某个子串，然后返回布尔值
			subStr：表示要检查String字符串中是否包含的子串
		3.2.String.repeat(num)：获得字符串重复的次数
			num：对String重复的次数，为整数
		

		
		
		
		
		
		
		
		
		
		
		
		
		
	
5.方便的数据结构--解构
	对象和数组时JS中最常用也是最重要的表示形式，为了简化提取数组元素和对象属性的信息，ES6新增了解构，可以将一个数据结构分解为更小的部分的过程
	
	解构能让我们从对象或数组中提取数据存为变量，如：
		const people = {
			name: 'lux',
			age: 20
		}
		const { name, age } = people	//name和age变量分别提取了people对象的属性
		const color = ['red', 'blue']
		const [first, second] = color	//first和second变量提取了数组中的元素
		
6.Spread Operator：开展运算符
	格式：...		-->（就是三个点）
	1.组装数组或对象象；如：
		const color = ['red', 'yellow']		//数组
		const colorful = [...color, 'green', 'pink']
		//colorful的元素变成了：'red','yellow','green', 'pink'
		
		const alp = { fist: 'a', second: 'b'}	//对象
		const alphabets = { ...alp, third: 'c' }
		//alphabets对象属性变成了：fist:'a',second:'b',third:'c'
		
	2.也可以获取数组或对象除了前几项或者除了某几项的其他项；如：
		const number = [1,2,3,4,5]
		const [first, ...rest] = number
		//rest数组的元素：[2,3,4,5];
		
		 const user = {
			username: 'lux',
			gender: 'female',
			age: 19
		}
		const { username, ...rest } = user
		//rest对象的属性：gender: 'female',age: 19
	
	3.对于对象Object而言，还可以使用...组合成新的Object
		tip:如果有重复的属性名，则右边覆盖左边
		如：
		const first = {a: 1,b: 2,c: 6,}
		const second = {c: 3,d: 4}
		const total = { ...first, ...second }
		//total属性： a: 1, b: 2, c: 3, d: 4
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		