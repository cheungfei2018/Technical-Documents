函数的扩展

1.函数参数的默认值
	es6之前，不能直接为函数的参数指定默认值，es6允许直接设置函数默认值
	
	参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的

	默认值参数可以与解构赋值的默认值结合使用，如：
	function foo({x, y = 5}) {console.log(x, y);}
	foo({x: 1, y: 2}) // 1 2
	
	函数的length属性：指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真

	
2.rest参数：
	ES6引入了rest参数(形式为...变量名),用于获取函数的多余参数，这样就不需要使用arguments对象，rest参数搭配的是一个数组，该变量将多余的参数放入数组中。
	
	function add(...value) {......}


3.严格模式：'use strict'
	从 ES5 开始，函数内部可以设定为严格模式。
	ES2016做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错
	

4.函数的name属性
	函数的name属性，可以返回该函数的函数名，如
		add.name === 'add'
	tip:ES6对这个属性的行为做出了一些修改。如果将一个匿名函数赋值给一个变量，ES5 的name属性，会返回空字符串，而 ES6 的name属性会返回实际的函数名。
	
	
5.箭头函数：ES6允许使用"箭头"( => )定义函数
	箭头函数：函数的快捷写法
	
	格式：var functionName = (param1,param2...) =>{
			//函数代码块
		}
	
	//1.没有参数的,且直接返回结果的箭头函数，可以省略函数体的大括号
    let a1 = ()=> 'hello cyb';  //
    console.log(a1());
    //a1函数相当于：
     function a1() {
         return 'hello cyb';
     }
    
    //1.1 直接返回一个对象：必须用小括号括起来，因为{}被解释为代码块
    let b1 = ()=>({name:'cyb',age:25});
    console.log(b1().age);

    //1.2 如果箭头函数只有一行代码，且不需要返回值，可以采用下面的写法，就可以不用写代码块
    let b2 = () => void doesNotReturn();

    //2.不带参数的
    let a2 = ()=>{
        console.log("没带参数");
    }
    a2();

    //3.带一个参数的，参数的小括号可以省略
    let num = 1000;
    let a3 = n =>{
        console.log(n);
    }
    a3(num);

    //如果有默认值，必须要用小括号
    let a4 = (m=100) =>{
        console.log(m);
    }
    a4();

    //箭头函数可以简化回调函数，如map
    let arr1 = [1,2,3].map(x=>x*x);
    console.log(arr1);
	
	
使用箭头函数时需要注意：
	1.函数体内的this对象，就是定义时所在地的对象，而不是使用时所在的对象
	2.不可以当做构造函数，即不能使用new命令
	3.不可以使用arguments对象，该对象在函数体内不存在，可用rest参数代替
	4.不可以使用yield命令，因此箭头函数不能用作generator韩数据
	
	
	箭头函数最直观的特点：
		1.不需要function关键字创建函数
		2.省略return关键字
		3.继承当前上下文的this关键字
		
		
		tip：当函数有且仅有一个参数时，可以省略掉括号，当函数返回有且仅有一个表达式时可以省略{}；如下：
		var peo = name => "hello"+name;
		其中 peo 是箭头函数的函数名；name 是箭头函数的参数；"hello"+name是返回值
		
		
		
		
		
		
		
		
		
		