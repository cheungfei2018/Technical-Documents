解构赋值针对的是--数组、对象、字符串等可分割的数据

ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。

	匹配模式：只要等号两边的模式相同，左边的变量就会被赋予对应的右边的值，
	
数组的解构赋值：

	//完全解构
	let [a,b,c] = [1,2,3];	//得到的是变量a=1,b=2,c=3
	let [head,...tail] = [1,2,3,4]; //head = 1, tail = [2,3,4]
	
	//不完全解构
	let [x,y,...z] = ['a'];	//x='a',y=undefined,z=[]
	let [,,third] = ['f','b','i'];  //third = 'i'
	let [x1,y1] = [1,2,3];
	let [a1,[b1],c1] = [1,[2,3],4];
	
	tip: 如果解构不成功，变量的值就等于undefined
	
	如果等号左边是数组[]的匹配模式，而右边不是数组，将会报错
	如：
	let [foo] =1;
	let [foo] =false;
	let [foo] = {};
	以上都会报错
	
	
	默认值：解构赋值允许指定默认值--（这点和函数参数有点类似）
	如：
	let [foo='cyb'] = [];	//foo = 'cyb'
	
	在ES6中使用严格相等运算符(===),判断一个位置是否有值，所以只有当一个数组成员严格等于undefined时，默认值才会生效；
	也就是说如果数组成员是null，默认值就不会生效，因为null不严格等于undefined
	
	如果默认值是一个表达式，那么这个表达式是惰性求职的，即只有再用刀的时候才会求值
	
	
	
对象的解构赋值
	格式：
		let {} = {}
		
	对象的解构和数组有一个重要的不同：
		数组的元素是按次序排列的，变量的取值由他的位置决定；
		对象的属性没有次序之分，变量必须与属性同名，才能去到正确的值
	
	如：
		let {bae,foe} = {foe:'aaa',bae:'bbb'};
	//如果变量名和属性名不一致，则必须写成下面的形式
		let {属性名:新变量名} = {属性名:属性值,...}
		新变量名 = 属性值
		如：
		let { foo: baz } = { foo: 'aaa', bar: 'bbb' };	//baz = 'aaa'
		tip:找到属性名foo,然后赋值给变量baz，也就是从前者赋值给后者
	
	
	对象解构也能用于嵌套结构的对象
	
	对象解构也能指定默认值，同样是需要对象属性严格等于undefined
	
	如果解构失败，变量的值将等于undefined
	
	如果要将一个已经声明的变量用于解构赋值，如下：
		let x;
		{x} = {x: 1};	//错误
	上面将会报错，因为js引擎将{x}理解成一个代码块，从而发生语法错误；
	这种解决方式是：不能讲大括号写在行首，避免js将其解释为代码块，如下：
		({x} = {x: 1});	//正确，参照下文
		
	圆括号与解构赋值的关系：
		解构赋值允许等号左边的模式之中，不放置任何变量名：
			({} = [true, false]);
			({} = 'abc');
			({} = []);
		上面的表达式毫无意义，但是语法是合法的，可以执行

	
字符串的解构赋值	
	字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象
		const [a, b, c, d, e] = 'hello';
	 
	类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值
		let {length : len} = 'hello';
	
	
	
	
数值和布尔值也可以进行解构赋值，会先转化为对象	
	let {toString: s} = 123;
	let {toString: s} = true;
	
函数的参数也可以结构赋值:
	function add([x, y]){
	  return x + y;
	}
	
	
圆括号问题：建议只要有可能，就不要在模式中放置圆括号

不能使用圆括号的情况：
	1.变量声明语句
	2.函数参数
	3.赋值语句的模式
	
可以使用圆括号的情况(只有一种)：赋值语句的非模式部分，可以使用圆括号
	[(b)] = [3]; // 正确
	({ p: (d) } = {}); // 正确
	[(parseInt.prop)] = [3]; // 正确
	
	
	
变量结构的用途：
	1.交换变量的值，如：
		[x, y] = [y, x];
	2.从函数返回多个值(放到对象中然后解构)
	3.函数参数的定义：可以方便的将一组参数和变量名对应起来
	4.提取JSON数据(很有用)
	5.函数参数的默认值
	6.遍历Map结构
	7.输入模块的指定方法
	
	
	
	
	
	