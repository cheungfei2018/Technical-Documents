版本管理系统：只能跟踪文本文件的改动，如txt文件，网页，所有代码程序等

如图片、视频、word格式是二进制文件，版本控制系统是没法跟中word文件的改动的



Window版本msysgit下载地址：https://git-for-windows.github.io/
安装完成后，能找到“git bash”并打开类似命令行窗口，说明安装成功

使用gmsysgit:

1.
	$git config --global user.name "your name"
	$git config --global user.email "1378511140@qq.com"
解释：
	上面两行代码用于写当前使用机器的用户名和邮箱地址，因为git是分布式版本控制系统，所以使用相同git库的不同机器需要自报家门，以便标识不同机器,每台机器上传版本库到网络库之前都要设置

	
2.
	创建版本控(本地)--repository
	创建repository实际上就是创建一个目录，这个目录中的所有文件度可以呗git管理起来，每个文件的修改、删除等操作，git都能跟踪，以便每时每刻度可以跟踪历史，或者在将来某个时刻可以还原
	仓库可以在任意磁盘上适合的地方创建，创建一个空目录即可，如创建 /cyb/
	(为避免遇到各种问题，需要保持目录名不包含中文)
	
	代码创建空目录：
	$ mkdir cyb		#创建空目录
	$ cd cyb		#进入目录
	$ pwd 			#显示当前目录
	
	创建好目录之后需要把当前目录变成git可以管理的仓库，如下
	
	创建git仓库：
	$ git init  	#创建一个仓库，创建后目录下多了个.git影藏文件夹
	
	.git文件夹用于git来跟踪管理版本库的，不要手动修改该目录的内容,可以在一个已有内容的目录下创建git仓库。
	
	查看隐藏目录或文件命令：
	$ ls -ah
	
	删除 .git
	$ rm -rf .git
	
	
	如创建一个readme.txt
	$ vim readme.txt
	
3.把文件添加到git仓库
	两步走：
	$ git add readme.txt
	$ git commit -m "I have wrote a readme.txt file"
	
解释：
	git add 命令，用于把一个文件提交到git仓库的缓存区域(还未到达仓库内部)，可重复多次使用添加多个文件
	git commit命令，用于把使用git add添加到缓存区域的一个或多个文件提交到git库中， -m 参数后面可以添加本次提交的说明，可以输入任何内容。
	注意：如果不先使用git add 而直接使用git commit 无法提交到库中
	两步完成后完成文件提交到本地git库
	
	
	
4.查看仓库当前的状态命令：
	$ git status
	
5.如果git status显示有文件被修改，可以使用查看修改内容的命令：
	$ git diff	#能查看文件的具体修改内容，是工作区和暂存区的比较
	$ git diff --cached  #是暂存区(stage)和分支(master-git库)的比较
	
6.查看提交版本记录的历史记录命令：
	$ git log		#可查看历史版本，以确定回退到哪个版本
	$ git log --pretty=oneline		#查看历史版本，并每个版本一行显示
	$ git reflog 	#查看每条命令操作的历史记录，可用于重返未来
	
7.回退到某个版本命令：
	$ git reset --hard * 
解释：
	*号可以为每个版本的id号，也可以为HEAD^表示上一个版本，HEAD指向当前版本，HEAD^^表示上上个版本，上50个版本可以写成HEAD~50
	--hard	参数加了后，在git库中改变版本时，工作区的文件也会一起更新
	
8.比较版本库中文件和工作区文件最新版本命令：
	$ git diff HEAD -- 工作区文件名
	
9.修改了工作区的文件后如果要回到上一个版本状态，两种方法撤销：
	9.1 直接手动修改保存
	9.2 在 git bash中使用命令：
		$ git checkout -- 文件名	#即可会到上个版本，也就是撤销修改
	
10.修改了文件而且提交到了缓存区(git add)，撤销：
	10.1 把缓存区内容回退到工作区 HEAD表示最新版本 
		$ git reset HEAD 文件名
	10.2 工作区文件撤销修改
		$ git checkout -- 文件名
		
11.如果文件以及提交到了git库(git commit),撤销：
	可以回退到上一个版本：
	$git reset --HEAD HEAD^
	
12.如果把文件推送到了远程版本库，那就game over了





远程：

1. 需要在github中注册一个账户

2.创建SSH Key，查看主目录下是否有.ssh目录，如果没有执行下面命令创建：
	$ ssh-keygen -t rsa -C "邮箱地址"
	然后一路回车

3.创建成功后，在主目录中找到.shh目录，里面有id_rsa(秘钥)和id_rsa.pub(公钥)两个文件，然后把公钥内容拷贝到github中的ssh设置中

4.在远程GitHub中新建一个repository

5.关联本地仓库和远程仓库：
	$ git remote add origin git@github.com:githubUsername/repoName.git
 
6.检查本地git是否连接GitHub成功命令
	$ ssh -T git@github.com
	
7.取消本地目录下关联的远程仓库
	$ git remote remove origin
	
8.把本地仓库的内容推送到远程仓库
	$ git push -u origin master	#实际上就是把当前分支master推送到远程
	参数 -u 第一次推master时添加，可以使本地master分支内容推送到远程新的master分支，同时把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令

9.取回远程仓库的某个分支的更新
	$ git pull origin master
	
10.从把远程仓库克隆到本地
	$ git clone git@github.com:githubUsername/repoName.git
	#该命令会把远程库原原本本克隆到本地主机
	上面使用的是ssh(速度最快)协议的地址，也可以使用https（速度较慢）的地址在某些只开放了HTTP端口的公司或团队内部无法使用ssh，只能使用https
	
	

	
	
	
分支：

1.创建分支并切换到分支
	$ git checkout -b cyb_03_06
	参数 -b 表示创建并且换，相当于下面两条指令：
	$ git branch cyb_03_06
	$ git checkout cyb_03_06
	
2.查看当前分支
	$ git branch
	$ git branch -a 		#查看远程分支

3. 合并分支
	$ git merge cyb_03_06
	git merge 命令用于合并指定分支到当前分支，合并后可以发现，当前分支的内容和 cyb_03_06分支的最新提交内容完全一致
	
4.删除不需要的分支
	$ git branch -d cyb_03_06
	
5.删除远程分支
	$ git push origin :cyb_03_06		# git push 远程名 (要空格):分支名
	
6.查看分之合并图
	$ git log --graph
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	