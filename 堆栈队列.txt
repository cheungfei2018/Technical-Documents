进程、线程、栈、堆栈、堆、队列

进程(process)和线程(thread)是操作系统的基本概念

进程：进程是具有一定独立功能的程序关于某个数据集合上的一次允许活动；是系统进行资源分配和调度的一个对单位；好比工厂的一个车间，一个车间完成一个任务

线程：线程是进程的一个实体，是CPU调度和分派的基本单位；它是比线程更小的能独立运行的基本单位，线程基本上不拥有系统资源，只拥有一点在运行中必不可少的资源(如程序计数器、一组寄存器和栈)，但是他可与同属一个进程的其他线程共享进程所拥有的全部资源；好比一个车间中的工人，很多工人协同完成一个任务

	一个进程中的内存空间是共享的，每个线程度可以使用这些共享内存
	有些内存空间只能容纳一个线程，当一个线程占据该内存空间时，必须等当前线程使用完别的线程才能使用这一内存，放置其他线程进入的简单方法，就是上锁，这叫"互斥锁"(Mutual exclusion,缩写：Mutex),可以防止多个线程同时读写某一块内存区域
	还有些内存空间可以容纳n个线程，如果数量大于n，多出来的线程只能在外面等着；这时的解决方法就是在门口挂n把要是，进去的线程可以取一把钥匙，出来就放回原处，后面没钥匙的就要等，这种做法叫做“信号量”(Semaphore),用来保证多个线程不会冲突
	从上面可以看出，mutex是semaphore的一个特殊情况(n=1时)，所以可以使用semaphore代替mutex，但是mutex比较简单，且效率高，所以在必须独占资源的情况下，使用mutex设计

进程与线程的关系：
	一个线程可以创建和撤销另一个线程，同一进程中的多个线程之间可以并发执行，对于进程而言，线程是一个更加接近与执行体的概念，可与同进程中的其他线程共享数据，但拥有自己的栈空间，拥有独立的执行序列
	
进程与线程的区别：
	进程和线程的主要差别在于他们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个线程死掉就等于整个进程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。
	对于一些要求同时进行且又要功能项某些变量的并发操作，只能用线程，不能用进程
	1) 简而言之,一个程序至少有一个进程,一个进程至少有一个线程.
	2) 线程的划分尺度小于进程，使得多线程程序的并发性高。
	3) 另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。
	4) 线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。
	5) 从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。
	
进程和线程的优缺点：
	线程和进程在使用上各有优缺点：线程执行开销小，但不利于资源的管理和保护；而进程正相反。同时，线程适合于在SMP机器上运行，而进程则可以跨机器迁移。

	
操作系统的设计：
	1.以多进程形式，允许多个任务同时执行
	2.多进程形式，允许单个任务 分成不同的部分进行
	3.提供协调机制，一方面防止进程之间和线程之间产生冲突，另一方面允许进程之间和线程之间共享资源

FIFO：first input first output 先进先出队列

栈和堆栈是一个概念！！！！！！！！！！！！！！

栈\堆栈(stack)：数据暂时存储的地方；是限定仅在表头进行插入和删除操作的线性表(数据结构)。先进后出，像一个箱子，先进去的放在最底部，后进去的放在上面，出来的时候只能上面的现出来
栈可以用来在函数调用的时候存储断点，做递归是要用到栈

堆(heap)：数据临时存储的地方，一类特殊的数据结构的统称，通常是一个可以被看做一棵树的数组对象，不存在先进先出还是先进后出

队列：先进先出，就像一条路，一个入口，一个出口，先进去的就可以先出去



进程中每个线程都有自己的堆栈，这是一段线程创建时保留下的地址区域。我们的“栈内存”即在此。至于“堆”内存，我个人认为在未用new定义时，堆应该就是未“保留”未“提交”的自由空间，new的功能是在这些自由空间中保留（并提交）出一个地址范围。

堆是在程序运行时，而不是在程序编译时，申请某个大小的内存空间。即动态分配内存，对其访问和对一般内存的访问没有区别。{堆是指程序运行是申请的动态内存，而栈只是指一种使用堆的方法(即先进后出)。}



1.堆栈的空间分配：
	栈：由操作系统自动分配释放，存放函数的参数值、局部变量的值等，操作方法类似于数据结构中的栈
	堆：一般有程序员分配释放，若程序员不释放，程序结束后可能有OS回收，分配方式类似于链表

2.堆栈缓存方式：
	栈使用的是一级缓存，通常是被调用时处于存储空间中，调用完毕立即释放
	堆则是存放在二级缓存中，声明周期有虚拟机的垃圾回收算法来决定，所以调用这些对象的速度要相对来的低一些
	
3.堆栈数据结构的区别：
	堆：可以被看成是一棵树，如：堆排序
	栈：一种先进后出的数据结构
	
	从变量存储方面来看堆和栈的区别：
	程序的局部变量存在于（栈）中，全局变量存在于（静态区）中，动态申请数据存在于（堆）中；
	
队列：
	是一种特殊的线性表，特殊之处在于他只允许在标的前端(front)进行删除操作，而在表的后端(rear)进行插入操作，和栈一样，队列是一种操作受限制的现象表，插入数据的一端为队尾，删除数据的一端为队头。
	
	队列中没有元素时，成为空队列。
	
	建立顺序队列结构必须为其静态分配或动态申请一片连续的存储空间，并设置两个指针进行管理。一个是队头指针front，它指向队头元素；另一个是队尾指针rear，它指向下一个入队元素的存储位置。

	队列采用的FIFO(first in first out)，新元素（等待进入队列的元素）总是被插入到链表的尾部，而读取的时候总是从链表的头部开始读取。每次读取一个元素，释放一个元素。所谓的动态创建，动态释放。因而也不存在溢出等问题。由于链表由结构体间接而成，遍历也方便。（先进先出）


堆、栈、队列的区别：
	1.堆是程序在运行时，而不是在程序编译时，生气某个大小的内存空间，即动态分配内存，对其访问和对一般内存的访问没有区别
	2.栈就是一个桶，后放进去的先拿出来
	3.队列只能在队头删除，在队尾插入，而栈只能在栈顶删除和插入











