JS模块化编程：
	网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试等不得不用软件工程的方法，管理网页的业务逻辑，
	Javascript模块化编程，已经成为一个迫切的需求。理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。
	Javascript不是一种模块化编程语言，它不支持"类"（class）
	
1.原始写法：
	模块就是实现特定功能的一组方法。
	只要把不同的函数(以及记录状态的变量)简单的放在一起，就算是一个模块
	缺点：“污染”了全局变量，无法保证不予其他模块产生变量名冲突，而且模块成员之间看不出直接关系

2.对象写法
	为了解决上面的缺点，可以把模块写成一个对象，所有的模块成员都放到这个对象里面。
	使用的时候，调用对象的属性即可
	缺点：会暴露所有模块成员，内部状态可以被外部改写，如外部代码可以直接改变内部计时器的值

3.立即执行函数写法
	IIFE(立即执行函数)，可以达到不暴露私有成员的目的

4.放大模式
	如果一个模块很大，必须分为几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”（augmentation）
	
























