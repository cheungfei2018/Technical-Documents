Node.js是一个JavaScript运行环境(runtime);实质是对Chrome V8引擎进行了封装。
	V8引擎执行JavaScript的速度非常快，性能非常好，node.js是一个基于Chrome javascript运行时建立的平台，用于方便地搭建响应速度快、抑郁扩展的网络应用
	node.js使用事件驱动，非阻塞I/O模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的应用
	
	
关注NodeJS的网站：
	1.官网：nodejs.org
	2.模块社区：npmjs.com
	3.github
	4.技术问答社区：stackoverflow.com
	
	
版本的小数位：
	-0.y.x
	y:偶数为稳定版本，奇数为非稳定版本
	
	
模块(在NodeJS中，文件即模块)：
	1.核心模块：nodejs自带的核心模块，会预先加载
	2.文件模块：创建的本地模块
	3.第三方模块：npm中加载的第三方模块
	

模块的流程
	1.创建模块：创建js文件
	2.导出模块：使用exprots对象挂载导出
	3.加载模块：使用require中引入模块文件
	4.使用模块：直接调用模块中的方法



作用域：
	变量的有效范围

执行上下文：
	this的拥有者(this指向的对象)
	如：
		1.对象中使用this指向当前对象
		2.构造函数中this指向当前实例化对象
		3.普通函数或环境中this指向顶层的全局对象；浏览器环境指向window对象，NodeJS环境指向global对象
	
	
node.js vs PHP
	优点
		性能高(机制问题)
		开发效率高(优化方面)
		应用范围广(可以开发桌面系统，electron框架)
	缺点
		新、人少
		中间件少
		IDE不完善
		
nodejs劣势和解决方案
	1.默认不支持多核，用cluster可以解决
	2.默认不支持服务器集群，node-http-proxy可以解决
	3.使用nginx做负载均衡，今天静态的由nginx处理，动态的有NodeJS处理
	4.forever或node-cluster实现灾难恢复
	
	
概念进阶：
1.回调
	异步变成的最基本的方法，将后续逻辑封装到函数中，然后将函数作为起始逻辑函数的参数，逐层嵌套，实现完整逻辑
2.同步/异步
	同步是任务按照顺序执行的，前一个任务结束后才能执行下一个任务
	异步是任务开始后，继续执行下一个任务，任务结束时触发回调函数
	
3.I/O
4.单线程/多线程
5.阻塞/非阻塞
6.事件
	程序中的发生的动作，如http模块创建服务器、链接服务器等等
7.事件驱动
	
8.基于事件驱动的回调
9.事件循环
	
	
热门框架：
	express
	koa
	hapi（复杂）
	基于express的sails
	
	
	
	











	