NPM：NodeJS的包管理工具，能够解决NodeJS代码部署上的很多问题。

常见的使用场景：
	1.允许用户从NPM服务器下载别人编写的第三方包到本地
	2.允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用
	3.允许用户将自己编写的包或命令行上传到NPM服务器供别人使用

新版本的NodeJS已经集成了NPM，可以通过输入" npm -v "来检测是否安装成功

如果需要升级旧版本的npm，可通过下面命令：
	
	window系统：
		npm install npm -g
		使用淘宝淘宝镜像的命令：
		cnpm install npm -g
	
	linux：
		$ sudo npm install npm -g
		/usr/local/bin/npm -> /usr/local/lib/node_modules/npm/bin/npm-cli.js
		npm@2.14.2 /usr/local/lib/node_modules/npm
		
		
		
使用npm命令安装模块：
	$ npm install <Module Name>
	如下，安装常用的Node.js web框架模块express：
	$ npm install express
	安装好之后，express包就放在了工程目录下的node_modules目录中，因此在代码中只需要通过require('express')的方式就可以使用，无需指定第三方包路径
	如：
	var express = require('express');
		
		

全局安装和本地安装：
	1. 本地安装：	
		npm install express          # 本地安装
	1.1本地安装将安装包放在./node_modules下(运行npm命令时所在的目录)，如果没有node_modules目录，则会在当前执行npm命令的目录下生成node_modules目录
	1.2可以通过require()来引入本地安装的包
		
	2. 全局安装：
		npm install express -g   	# 全局安装
	2.1将安装包放在/user/local下或者在你的node的安装目录
	2.2可以直接在命令行中使用
	
	3.添加到依赖列表安装：
		npm install express --save
	
	tip:node使用npm安装模块时，如果指定了--save参数，那么此模块将被添加到package.json文件中dependencies依赖列表中，然后通过npm install命令即可自动安装列表中所列出的所有模块
	
如果希望同时具备两种功能，则需要在两个地方都安装或者使用npm link命令


查看所有全局安装的模块：
	$ npm list -g
	
查看某一模块的版本号：
	$ npm list grunt
	
//查看模块包的所有版本号
	$ npm view 模块名称 versions
	

使用package.json：
package.json位于模块的目录下，用于定义包的属性。
package.json属性说明：
    name - 包名。
    version - 包的版本号。
    description - 包的描述。
    homepage - 包的官网 url 。
    author - 包的作者姓名。
    contributors - 包的其他贡献者姓名。
    dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。
    repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。
    main - main 字段指定了程序的主入口文件，require('moduleName') 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。
    keywords - 关键字
	
	
写在模块：
	$ npm uninstall express
	
卸载后可查看/node_modules/目录下包是否还存在：
	$ npm ls
	

更新模块：
	$ npm update express(模块名)
	
搜索模块：
	$ npm search express


创建模块（可创建出package.json文件）：
	$ npm init
	
可以使用以下命令在npm资源库中注册用户(邮箱注册)
	$ npm adduser
	Username:...
	Password:...
	Email:...（公开的邮箱）
	
发布自己的模块：
	$ npm publish
	发布后的模块可以跟其他模块一样使用npm来安装

	
版本号：使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码
	语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号
	当代码变更时，版本号按以下原则更新
	1.如果只是修复bug，需要更新z位
	2.如果是增加了新功能，但是向下兼容，需要更新Y位
	3.如果有大变动，向下不兼容，需要更新X位
	版本号有了这个保证后，在申明第三方包依赖时，除了可依赖于一个固定版本号外，还可依赖于某个范围的版本号。例如"argv": "0.0.x"表示依赖于0.0.x系列的最新版argv
	版本好更多相关：
https://docs.npmjs.com/files/package.json#dependencies


NPM常用命令：




淘宝NPM镜像：
	国内直接使用NPM的官方镜像是非常慢的，所以推荐使用淘宝NPM镜像
	淘宝NPM镜像是一个完整npmjs.org镜像，你可以用此代替官方版本(只读)，同步频率目前为10分钟一次以保证尽量与官方服务同步。
	而且可以使用淘宝定制的cnpm(gzip压缩支持)命令工具代替默认的npm：
	$ npm install -g cnpm --registry=https://registry.npm.taobao.org
	
	然后就可以使用cnpm命令来安装模块了：
	$ cnpm install [name]
	

	
	
	

如出现以下错误：
npm err! Error: connect ECONNREFUSED 127.0.0.1:8087 
解决方法：
$ npm config set proxy null
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	