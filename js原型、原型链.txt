js需要搞懂的几个概念：原型、原型链、封装、继承、浅拷贝、深拷贝、作用域、作用域链、执行环境

原型：原型是一个对象，每个对象和原型都有一个原型；

原型链：对象的原型指向对象的父级，而父的原型指向父的父，这种通过原型层层连接起来的关系称为原型链（把有__proto__属性开始串起来直到Object.prototype.__proto__为null的链叫做原型链），这条链的末端一般是默认的对象原型--null
	每个对象独有一个__proto__属性，原型链上的对象正是依靠__proto__属性链接起来的
	1.每个构造函数在生成实例的时候都会自带一个constructor属性指向该构造函数,即：实例.constructor == 构造函数实现继承
	2.同时js规定，每个构造函数都有一个prototype属性，指向另一个prototype对象,这个对象的所有属性和方法都会被构造函数继承
	3.JS在创建对象(无论是普通对象还是函数对象)，都有一个__proto__的内置属性，用于指向创建它的函数对象的原型对象prototype
	
	例：person表示实例对象，Person表示构造函数，有如下关系：
		Person.prototype.constructor == Person
		person.__proto__ == Person.prototype
		person.constructor == Person


封装：js是基于对象的语言，但又不是OOP，因为没有class（ECMA6中有）
	"封装"数据和方法
	那么如何把property和method封装成一个对象呢
	1.原始模式：
		var obj= {name:'',color:''..}
		缺点：生成多个对象非常麻烦
		
	2.改进-函数封装：
		function Cat(name,color){return {name:'',color:''..}}
		缺点：创建出来的对象之间没有内在联系，不能反映出他们是同一个原型对象的实例
	3.构造函数模式：为解决从原型对象生成实例的问题，js提供了一个构造函数(Constructor)模式，实际上就是在一个普通函数中使用this变量，当对构造哈数使用new运算符时，就能生成实例并且this变量会绑定在实例对象上，如：
		function Cat(name,color){this.name =name;this.color = color}
		var cat1 = new Cat("小黑","black");
		这时任何创建的实例对象自动含有一个constructor属性，指向构造函数：cat1.constructor == Cat	-->true
		javascript还提供了一个instanceof运算符，用于验证原型对象与实例对象之间的关系：cat1 instanceof Cat  -->true
		缺点：构造函数方法是很好用，但存在一个浪费内存的问题；当构造函数中有一个不变的属性或方法时，当创建了多个实例后，这些不变的属性每个都有多个，因为是指向不同的属性；所以既不环保也缺乏效率；
		如果能让相同的属性或方法在内存中只生成一次，然后所有实例都指向那个内存地址，就可以减少内存占用和增加效率
	
	4.Prototype(原型)模式：js规定，每个构造函数都有一个prototype属性，指向另一个对象，这个对象的所有方法和属性，度会被构造函数的实例继承，所以可以把不变的方法和属性，直接定义在prototype对象上，而不需要每次实例化重新创建一次，如：
		function Cat(name,color){this.name =name;this.color = color}
		Cat.prototype.eat = function(){};
		然后在生成各种实例时，prototype中的方法或属性提供继承，这样每个对象中使用prototype的属性或方法都将指向一个内存，也就是相等:cat1.eat == cat2.eat;
		
		isPrototypeOf():用来判断某个prototype对象和某个实例之间的关系，
			如：Cat.prototype.isPrototypeOf(cat1)	//true
		
		hasOwnProperty():每个实例对象都有这个方法，用来判断某个属性到底是本地属性还是继承属性
			如：alert(cat1.hasOwnProperty("name"))
		
		in运算符:用来判断某个实例是否含有某个属性，不管是不是本地属性
			如：alert("name" in cat1)
		
		
继承：
	1.构造函数的继承
		(对象继承的五种方法)：
		1.1：构造函数绑定
		1.2：prototype模式
		1.3：直接继承prototype
		1.4：空对象中介
		1.5：拷贝继承
		
	2.非构造函数的继承(不使用构造函数实现继承)
		2.1：object()方法
		2.2：浅拷贝：拷贝基本数据类型的数据，拷贝的实际上是存储数据的地址
		2.3：深拷贝：使用新的地址存放拷贝的数据，因为生成不同的地址，所以改变拷贝数据时，不会改变原数据



js中的深拷贝和浅拷贝：针对数组或对象等引用值
	浅拷贝：简单的赋值就是浅拷贝，因为对象和数组在赋值的时候都是引用传递，赋值的时候只是传递一个指针，浅拷贝会修改原始值
	
	深拷贝：有时候需要原样的把数组或者对象赋值一份，在修改值的时候，不改变初始对象的值，这时候用到深拷贝
	
	一维数组深拷贝
	多维数组深拷贝
	完整对象深拷贝
	
	
	js提供的深拷贝方法：
	slice：一维数组深拷贝
	concat：一维数组深拷贝
	
	jquery中对数组的clone：
	jQuery.extend([deep]，target，object1，object2.....);
	deep:可选，是否合并多个对象相同属性
	target：目标对象
	objectN：可选，被合并的对象
	如 var c = $.extend(a)	//将a对象复制到jQuery对象上，并复制给c
	extend()不是复制引用，而是创建了新的对象
	
执行环境：js中最为重要的一个概念
	执行环境定义变量或函数有权访问的其他数据，决定了他们各自的行为；每个执行环境独有一个与之有关联的变量对象，环境中定义的所有变量和函数都保存在这个对象中，虽然我们编写的代码无法使用这个对象，但是解析器在处理数据时会在后台使用它
	
作用域：

作用域链：
	
	
	
	
	
	
	
	
	
	
	
	